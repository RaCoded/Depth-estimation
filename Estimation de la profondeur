{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOoDUhj/uGih333V/DYtvUi"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Utilisation du mod√®le MiDaS 3.0   (https://huggingface.co/Intel/dpt-large)\n"],"metadata":{"id":"Lb6XC4u-lG9k"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"CZKTKo62hmUv","colab":{"base_uri":"https://localhost:8080/"},"outputId":"abbfeed6-9b09-48b8-b775-2ad6acd64b3f"},"outputs":[{"output_type":"stream","name":"stderr","text":["Some weights of DPTForDepthEstimation were not initialized from the model checkpoint at Intel/dpt-large and are newly initialized: ['neck.fusion_stage.layers.0.residual_layer1.convolution1.bias', 'neck.fusion_stage.layers.0.residual_layer1.convolution1.weight', 'neck.fusion_stage.layers.0.residual_layer1.convolution2.bias', 'neck.fusion_stage.layers.0.residual_layer1.convolution2.weight']\n","You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"]}],"source":["from transformers import DPTImageProcessor, DPTForDepthEstimation\n","import torch\n","import numpy as np\n","from PIL import Image\n","import requests\n","import matplotlib.pyplot as plt\n","\n","url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n","image = Image.open(requests.get(url, stream=True).raw)\n","\n","processor = DPTImageProcessor.from_pretrained(\"Intel/dpt-large\")\n","model = DPTForDepthEstimation.from_pretrained(\"Intel/dpt-large\")\n","\n","# prepare image for the model\n","inputs = processor(images=image, return_tensors=\"pt\")\n","\n","with torch.no_grad():\n","    outputs = model(**inputs)\n","    predicted_depth = outputs.predicted_depth\n","\n","# interpolate to original size\n","prediction = torch.nn.functional.interpolate(\n","    predicted_depth.unsqueeze(1),\n","    size=image.size[::-1],\n","    mode=\"bicubic\",\n","    align_corners=False,\n",")\n","\n","# visualize the prediction\n","output = prediction.squeeze().cpu().numpy()\n","formatted = (output * 255 / np.max(output)).astype(\"uint8\")\n","depth = Image.fromarray(formatted)\n","\n","# Affichage\n","plt.figure(figsize=(12, 5))\n","\n","plt.subplot(1, 2, 1)\n","plt.title(\"Image originale\")\n","plt.imshow(image)\n","plt.axis(\"off\")\n","\n","plt.subplot(1, 2, 2)\n","plt.title(\"Profondeur (proche = blanc)\")\n","plt.imshow(depth, cmap='gray')\n","plt.axis(\"off\")\n","\n","plt.show()\n"]}]}